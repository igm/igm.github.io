<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Posts on Anything about Everything</title><link>https://blog.igormihalik.com/post/</link><description>Recent content in Posts on Anything about Everything</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Tue, 26 May 2015 16:26:45 +0200</lastBuildDate><atom:link href="https://blog.igormihalik.com/post/index.xml" rel="self" type="application/rss+xml"/><item><title>GO applications and Cloud Foundry</title><link>https://blog.igormihalik.com/post/go-applications-and-cloud-foundry/</link><pubDate>Tue, 26 May 2015 16:26:45 +0200</pubDate><guid>https://blog.igormihalik.com/post/go-applications-and-cloud-foundry/</guid><description>&lt;p>Cloud Foundry is one of many options to host your applications. It is a PaaS originally developed by VMware, now governed by &lt;!-- raw HTML omitted -->Cloud Foundry Foundation&lt;!-- raw HTML omitted -->. Not going much into details about where, how and what as those information is publicly available I&amp;rsquo;ll focus here on how to host your GO applications on any Cloud Foundry installation including &lt;!-- raw HTML omitted -->PCF&lt;!-- raw HTML omitted --> or &lt;!-- raw HTML omitted -->PWS&lt;!-- raw HTML omitted -->.&lt;/p></description></item><item><title>SockJS for Go III (yet another take)</title><link>https://blog.igormihalik.com/post/sockjs-for-go-iii-yet-another-take/</link><pubDate>Sat, 06 Dec 2014 22:31:13 +0200</pubDate><guid>https://blog.igormihalik.com/post/sockjs-for-go-iii-yet-another-take/</guid><description>&lt;p>It&amp;rsquo;s been a while since the last blog and this is the last in the series of &amp;ldquo;SockJS-go lessons learned&amp;rdquo;.&lt;/p></description></item><item><title>SockJS for Go II (lessons learned)</title><link>https://blog.igormihalik.com/post/sockjs-for-go-ii-lessons-learned/</link><pubDate>Fri, 31 May 2013 22:33:44 +0200</pubDate><guid>https://blog.igormihalik.com/post/sockjs-for-go-ii-lessons-learned/</guid><description>&lt;p>It&amp;rsquo;s been a while since implementing &lt;!-- raw HTML omitted -->SockJS library for Go&lt;!-- raw HTML omitted -->. Since then I learned couple of new things about the language and runtime. So here I&amp;rsquo;ll try to summarise what it was.&lt;/p></description></item><item><title>SockJS for Go</title><link>https://blog.igormihalik.com/post/sockjs-for-go/</link><pubDate>Tue, 11 Dec 2012 22:37:00 +0200</pubDate><guid>https://blog.igormihalik.com/post/sockjs-for-go/</guid><description>&lt;p>&lt;!-- raw HTML omitted -->SockJS&lt;!-- raw HTML omitted --> is a browser JavaScript library that provides a WebSocket-like object. SockJS gives you a coherent, cross-browser, Javascript API which creates a low latency, full duplex, cross-domain communication channel between the browser and the web server. Under the hood SockJS tries to use native WebSockets first. If that fails it can use a variety of browser-specific transport protocols and presents them through WebSocket-like abstractions.&lt;/p></description></item><item><title>go get...</title><link>https://blog.igormihalik.com/post/golang/</link><pubDate>Thu, 06 Sep 2012 00:00:00 +0000</pubDate><guid>https://blog.igormihalik.com/post/golang/</guid><description>&lt;p>Recently I came across a programming language called &lt;!-- raw HTML omitted -->GO&lt;!-- raw HTML omitted -->. At first I was a little skeptical about it, why another language? I spent most of my IT life in Java world, occasionally touching other languages (Ruby, C++, JavaScript, Python, Groovy, Scala, Erlang &amp;hellip;) but GO really got my attention.&lt;/p></description></item><item><title>BOSH on vSphere (micro Bosh)</title><link>https://blog.igormihalik.com/post/bosh-on-vsphere-micro-bosh/</link><pubDate>Thu, 28 Jun 2012 00:00:00 +0000</pubDate><guid>https://blog.igormihalik.com/post/bosh-on-vsphere-micro-bosh/</guid><description>&lt;p>Recently I spent some time playing with BOSH which is a tool for &lt;!-- raw HTML omitted -->release engineering, deployment and lifecycle management of large scale distributed services&lt;!-- raw HTML omitted -->. It is used to manage VMs in AWS and vSphere. The vSphere option seemed to be interesting to me and the idea of having private &lt;!-- raw HTML omitted -->Cloud Foundry&lt;!-- raw HTML omitted --> PaaS running locally on private infrastructure was exciting. The BOSH is under heavy development and it&amp;rsquo;s sometimes difficult to make things work easily even if following various tutorials and &lt;!-- raw HTML omitted -->blogs&lt;!-- raw HTML omitted --> and I&amp;rsquo;m very thankful to the authors.&lt;/p></description></item></channel></rss>